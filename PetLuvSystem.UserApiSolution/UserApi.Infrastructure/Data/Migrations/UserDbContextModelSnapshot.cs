// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserApi.Infrastructure.Data;

#nullable disable

namespace UserApi.Infrastructure.Data.Migrations
{
    [DbContext(typeof(UserDbContext))]
    partial class UserDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UserApi.Domain.Etities.StaffDegree", b =>
                {
                    b.Property<Guid>("DegreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DegreeDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DegreeImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DegreeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SignedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DegreeId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffDegrees");
                });

            modelBuilder.Entity("UserApi.Domain.Etities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UserApi.Domain.Etities.WorkSchedule", b =>
                {
                    b.Property<Guid>("WorkScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WorkScheduleId");

                    b.HasIndex("StaffId")
                        .IsUnique();

                    b.ToTable("WorkSchedules");
                });

            modelBuilder.Entity("UserApi.Domain.Etities.WorkScheduleDetail", b =>
                {
                    b.Property<Guid>("WorkScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("WorkingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("WorkScheduleId", "WorkingDate");

                    b.ToTable("WorkScheduleDetails");
                });

            modelBuilder.Entity("UserApi.Domain.Etities.StaffDegree", b =>
                {
                    b.HasOne("UserApi.Domain.Etities.User", "Staff")
                        .WithMany("StaffDegrees")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("UserApi.Domain.Etities.WorkSchedule", b =>
                {
                    b.HasOne("UserApi.Domain.Etities.User", "Staff")
                        .WithOne("WorkSchedule")
                        .HasForeignKey("UserApi.Domain.Etities.WorkSchedule", "StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("UserApi.Domain.Etities.WorkScheduleDetail", b =>
                {
                    b.HasOne("UserApi.Domain.Etities.WorkSchedule", "WorkSchedule")
                        .WithMany("WorkScheduleDetails")
                        .HasForeignKey("WorkScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WorkSchedule");
                });

            modelBuilder.Entity("UserApi.Domain.Etities.User", b =>
                {
                    b.Navigation("StaffDegrees");

                    b.Navigation("WorkSchedule");
                });

            modelBuilder.Entity("UserApi.Domain.Etities.WorkSchedule", b =>
                {
                    b.Navigation("WorkScheduleDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
