// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductApi.Infrastructure.Data;

#nullable disable

namespace ProductApi.Infrastructure.Data.Migrations
{
    [DbContext(typeof(FoodDbContext))]
    partial class FoodDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProductApi.Domain.Entities.Food", b =>
                {
                    b.Property<Guid>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AgeRange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CountInStock")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FoodDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ingredient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FoodId");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("ProductApi.Domain.Entities.FoodFlavor", b =>
                {
                    b.Property<Guid>("FlavorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Flavor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.HasKey("FlavorId");

                    b.ToTable("FoodFlavors");
                });

            modelBuilder.Entity("ProductApi.Domain.Entities.FoodImage", b =>
                {
                    b.Property<string>("FoodImagePath")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.HasKey("FoodImagePath");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodImages");
                });

            modelBuilder.Entity("ProductApi.Domain.Entities.FoodSize", b =>
                {
                    b.Property<Guid>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Isvisible")
                        .HasColumnType("bit");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SizeId");

                    b.ToTable("FoodSizes");
                });

            modelBuilder.Entity("ProductApi.Domain.Entities.FoodVariant", b =>
                {
                    b.Property<Guid>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FlavorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Isvisible")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("FoodId", "FlavorId", "SizeId");

                    b.HasIndex("FlavorId");

                    b.HasIndex("SizeId");

                    b.ToTable("FoodVariants");
                });

            modelBuilder.Entity("ProductApi.Domain.Entities.FoodImage", b =>
                {
                    b.HasOne("ProductApi.Domain.Entities.Food", "Food")
                        .WithMany("FoodImages")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");
                });

            modelBuilder.Entity("ProductApi.Domain.Entities.FoodVariant", b =>
                {
                    b.HasOne("ProductApi.Domain.Entities.FoodFlavor", "Flavor")
                        .WithMany("FoodVariants")
                        .HasForeignKey("FlavorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductApi.Domain.Entities.Food", "Food")
                        .WithMany("FoodVariants")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductApi.Domain.Entities.FoodSize", "Size")
                        .WithMany("FoodVariants")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flavor");

                    b.Navigation("Food");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("ProductApi.Domain.Entities.Food", b =>
                {
                    b.Navigation("FoodImages");

                    b.Navigation("FoodVariants");
                });

            modelBuilder.Entity("ProductApi.Domain.Entities.FoodFlavor", b =>
                {
                    b.Navigation("FoodVariants");
                });

            modelBuilder.Entity("ProductApi.Domain.Entities.FoodSize", b =>
                {
                    b.Navigation("FoodVariants");
                });
#pragma warning restore 612, 618
        }
    }
}
